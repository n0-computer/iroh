searchState.loadedDescShard("iroh_relay", 0, "Iroh’s relay is a feature within iroh, a peer-to-peer …\nTracks pings on a single relay connection.\nConfiguration of all the relay servers that can be used.\nInformation on a specific relay server.\nConfiguration for speaking to the QUIC endpoint on the …\nExposes <code>Client</code>, which allows to establish connections to a …\nIs this a known node?\nReturns the current timeout set for pings.\nDefault values used in the relay.\nDNS resolver\nCreate an empty relay map.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>RelayMap</code> from a <code>RelayUrl</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>RelayMap</code> from an iterator of <code>RelayUrl</code>.\nGet the given node.\nHTTP-specific constants for the relay server and client.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAre there any nodes in this map?\nHow many nodes are known?\nCreates a new ping tracker, setting the ping timeout for …\nStarts a new ping.\nSupport for handling DNS resource records for dialing by …\nReturns an <code>Iterator</code> over all known nodes.\nUpdates the ping tracker with a received pong.\nThe port on which the connection should be bound to.\nProtocols used by the iroh-relay\nCreate a QUIC server that accepts connections for QUIC …\nConfiguration to speak to the QUIC endpoint on the relay …\nA fully-fledged iroh-relay server over HTTP or HTTPS.\nCancel-safe waiting for a ping timeout.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nThe <code>RelayUrl</code> where this relay server can be dialed.\nReturns the sorted relay URLs.\nA relay client.\nBuild a Client.\nThe send half of a relay client.\nThe receive half of a relay client.\nConnection errors.\nErrors that can occur while dialing the relay server.\nErrors when receiving messages from the relay server.\nError for sending messages to the relay server.\nReturns if we should prefer ipv6 it replaces the …\nEstablishes a new connection to the relay server.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSkip the verification of the relay server’s SSL …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the capacity of the cache for public keys.\nReturns the local address of the client.\nCreates a client config that trusts any servers without …\nCreate a new <code>ClientBuilder</code>\nSet an explicit proxy url to proxy all HTTP(S) traffic …\nSplits the client into a sink and a stream.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nThe default HTTPS port used by the Relay server.\nThe default HTTP port used by the Relay server.\nThe default capacity of the key cache for the relay server.\nThe default metrics port used by the Relay server.\nThe default QUIC port used by the Relay server to accept …\nPotential errors related to dns.\nThe DNS resolver used throughout <code>iroh</code>.\nThe n0 testing DNS node origin, for production.\nThe n0 testing DNS node origin, for testing.\nError returned when an input value is too long for …\nRecord data for a TXT record\nTXT records returned from <code>DnsResolver::lookup_txt</code>\nRemoves all entries from the cache.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerform an ipv4 lookup with a timeout.\nResolve IPv4 and IPv6 in parallel with a timeout.\nRace an ipv4 and ipv6 lookup with a timeout in a staggered …\nPerform an ipv4 lookup with a timeout in a staggered …\nPerform an ipv6 lookup with a timeout.\nPerform an ipv6 lookup with a timeout in a staggered …\nLooks up node info by DNS name.\nLooks up node info by DNS name in a staggered fashion.\nLooks up node info by <code>NodeId</code> and origin domain name.\nLooks up node info by <code>NodeId</code> and origin domain name.\nLookup a TXT record.\nCreate a new DNS resolver with sensible cross-platform …\nRecreate the inner resolver\nResolve a hostname from a URL to an IP address.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns the raw character strings of this TXT record.\nCreate a new DNS resolver configured with a single UDP DNS …\nThe HTTP header name for relay client authentication\nThe HTTP path under which the relay accepts relaying …\nThe HTTP path under which the relay allows doing latency …\nThe websocket sub-protocol version that we currently …\nThe DNS name for the iroh TXT record.\nThe max byte length allowed for user-defined data.\nError returned when an input value is too long for <code>UserData</code>…\nData about a node that may be published to and resolved …\nExtension methods for <code>NodeId</code> to encode to and decode from …\nInformation about a node that may be published to and …\nUnder the hood this is a UTF-8 String is no longer than …\nAdds direct addresses to the node data.\nRemoves all direct addresses from the node data.\nThe information published about the node.\nReturns the direct addresses of the node.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>NodeInfo</code> from its parts.\nParses a <code>NodeInfo</code> from a <code>pkarr::SignedPacket</code>.\nParses a <code>NodeInfo</code> from a TXT records lookup.\nParses a <code>NodeId</code> from [<code>z-base-32</code>] encoding.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts into a <code>NodeAddr</code> without cloning.\nCreates a new <code>NodeData</code> with a relay URL and a set of …\nCreates a new <code>NodeInfo</code> with an empty <code>NodeData</code>.\nThe <code>NodeId</code> of the node this is about.\nReturns the relay URL of the node.\nSets the relay URL of the node data.\nSets the user-defined data of the node data.\nConverts into a <code>NodeAddr</code> by cloning the needed fields.\nCreates a <code>pkarr::SignedPacket</code>.\nConverts into a list of <code>{key}={value}</code> strings.\nEncodes a <code>NodeId</code> in [<code>z-base-32</code>] encoding.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns the optional user-defined data of the node.\nSets the direct addresses and returns the updated node …\nSets the direct addresses and returns the updated node …\nSets the relay URL and returns the updated node data.\nSets the relay URL and returns the updated node info.\nSets the user-defined data and returns the updated node …\nSets the user-defined data and returns the updated node …\nCommon types between the <code>super::handshake</code> and <code>super::relay</code> …\nThis module exports <code>looks_like_disco_wrapper</code> as the only …\nImplements the handshake protocol that authenticates and …\nThis module implements the send/recv relaying protocol.\nImplements logic for abstracting over a websocket stream …\nThe client frame type for the authentication frame\n32B dest pub key + ECN bytes + one datagram’s content\n32B dest pub key + ECN byte + segment size u16 + datagrams …\nPossible frame types during handshaking\nSent from server to client to tell the client if their …\nSent from server to client to signal that a previous …\nMessages with these frames will be ignored. 8 byte ping …\n8 byte payload, the contents of ping being replied to\n32B src pub key + ECN bytes + one datagram’s content\n32B src pub key + ECN byte + segment size u16 + datagrams …\nSent from server to client for the server to declare that …\nThe server frame type for the challenge response\nThe server frame type for authentication confirmation\nThe server frame type for authentication denial\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nThe 6 byte header of all discovery messages.\nReports whether p looks like it’s a packet containing an …\nFailed to deserialize client auth header\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nMessages that clients send to relays.\nOne or multiple datagrams being transferred via the relay.\nRepresents datagrams sent from relays (originally sent to …\nRequest from the client to relay datagrams to given remote …\nProtocol send errors.\nA one-way message from relay to client, declaring the …\nThe maximum size of a packet sent over relay. (This only …\nIndicates that the client identified by the underlying …\nRequest from the relay to reply to the other side with a …\nRequest from the client to the server to reply to the …\nReply to a <code>ClientToRelayMsg::Ping</code> from a client with the …\nReply to a <code>RelayToClientMsg::Ping</code> from a server with the …\nThe messages that a relay sends to clients or the clients …\nA one-way message from relay to client, advertising that …\nThe contents of the datagram(s)\nExplicit congestion notification bits\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe segment size if this transmission contains multiple …\nSplits the current datagram into at maximum <code>num_segments</code> …\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns this frame’s corresponding frame type.\nThe datagrams and related metadata to relay.\nThe remote node to relay to.\nThe datagrams and related metadata.\nIf set, is a description of why the connection is …\nAn advisory duration that the client should wait before …\nThe <code>NodeId</code> of the original sender.\nAn advisory duration for how long the client should …\nALPN for our quic addr discovery\nQuic client related errors.\nEndpoint close error code\nEndpoint close reason\nHandles the client side of QUIC address discovery.\nCreate a connection usable for qad\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new QuicClient to handle the client side of QUIC …\n<code>ToString::to_string</code>, but without panic on OOM.\nAccess restriction for a node.\nControls which nodes are allowed to use the relay.\nAccess is allowed.\nTLS certificate configuration.\nPer-client rate limit configuration.\nThe default certificate reload interval.\nAccess is denied.\nEveryone\nUse Let’s Encrypt.\nRate limits.\nUse a static TLS key and certificate chain.\nMetrics tracked for the relay server\nConfiguration for the QUIC server.\nConfiguration for the Relay HTTP and HTTPS server.\nAll metrics tracked in the relay server.\nUse a TLS key and certificate chain that can be reloaded.\nA Certificate resolver that reloads the certificate every …\nOnly nodes for which the function returns <code>Access::Allow</code>.\nA running Relay + QAD server.\nConfiguration for the full Relay.\nServer spawn errors\nServer task errors\nTLS configuration for Relay server.\nBurst limit for accepting new connection. Unlimited if not …\nRate limit for accepting new connection. Unlimited if not …\nNumber of times this server has accepted a connection.\nAccess configuration.\nThe socket address on which the QUIC server should bind.\nMax number of bytes per second to read from the client …\nBytes received from a <code>FrameType::SendPacket</code>\nNumber of bytes received from client connection which have …\nBytes sent from a <code>FrameType::SendPacket</code>\nMode for getting a cert.\nThe certificates chain if configured with manual TLS …\nRate limits for incoming traffic from a client connection.\nNumber of client connections which have had any frames …\n<code>FrameType::SendPacket</code> dropped that are disco messages\n<code>FrameType::SendPacket</code> received that are disco messages\n<code>FrameType::SendPacket</code> sent that are disco messages\nNumber of connections we have removed because of an error\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNumber of <code>FrameType::Ping</code>s received\nThe socket address the HTTP server is listening on.\nThe socket address on which the Relay HTTP server should …\nGet the server’s http <code>RelayUrl</code>.\nThe socket address the HTTPS server is listening on.\nThe socket address on which to serve the HTTPS server.\nGet the server’s https <code>RelayUrl</code>.\nPerform the initial load and construct the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this node allowed?\nKey cache capacity.\nRate limits.\nMax number of bytes to read in a single burst.\nReturns the metrics collected in the relay server.\nSocket to serve metrics on.\nPackets of other <code>FrameType</code>s dropped\nPackets of other <code>FrameType</code>s received\nPackets of other <code>FrameType</code>s sent\nConfiguration for the QUIC server, disabled if <code>None</code>.\nThe socket address the QUIC server is listening on.\nThe socket address on which to server the QUIC server is …\nConfiguration for the Relay server, disabled if <code>None</code>.\nReload the certificate.\n<code>FrameType::SendPacket</code> dropped, that are not disco messages\n<code>FrameType::SendPacket</code> received, that are not disco messages\n<code>FrameType::SendPacket</code> sent, that are not disco messages\nNumber of <code>FrameType::Pong</code>s sent\nMetrics tracked for the relay server.\nThe TLS server configuration for the QUIC server.\nThe server configuration.\nShutdown the resolver.\nRequests graceful shutdown.\nStarts the server.\nReturns the handle for the task.\nExposes functions to quickly configure a server suitable …\nTLS configuration for the HTTPS server.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nNumber of unique client keys per day\nNumber of <code>FrameType::Unknown</code> received\nThe TLS certificate chain.\nState for Let’s Encrypt certificates.\nCreates a <code>QuicConfig</code> suitable for testing.\nCreates a <code>RelayConfig</code> suitable for testing.\nCreates a <code>rustls::ServerConfig</code> and certificates suitable …\nCreates a <code>ServerConfig</code> suitable for testing.\nCreates a <code>TlsConfig</code> suitable for testing.")